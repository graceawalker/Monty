// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Monty.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Configuring Pay Period")]
    public partial class ConfiguringPayPeriodFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConfiguringPayPeriod.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Configuring Pay Period", "A a user, in order to manage my accounts,\r\nwhen I edit a pay period then the chan" +
                    "ges should be saved to the database", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a pay period")]
        public virtual void CreatingAPayPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a pay period", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "StartDate",
                        "EndDate"});
            table1.AddRow(new string[] {
                        "JuneTest",
                        "01/01/2012",
                        "02/02/2012"});
#line 7
testRunner.Given("I have a new system with pay periods", ((string)(null)), table1);
#line 10
testRunner.When("I retrieve JuneTest from the database");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "StartDate",
                        "EndDate"});
            table2.AddRow(new string[] {
                        "JuneTest",
                        "01/01/2012",
                        "02/02/2012"});
#line 11
testRunner.Then("It should have details", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating multiple pay periods")]
        public virtual void CreatingMultiplePayPeriods()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating multiple pay periods", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "StartDate",
                        "EndDate"});
            table3.AddRow(new string[] {
                        "JuneTest",
                        "01/01/2012",
                        "02/02/2012"});
            table3.AddRow(new string[] {
                        "JulyTest",
                        "03/03/2012",
                        "04/04/2012"});
#line 16
testRunner.Given("I have a new system with pay periods", ((string)(null)), table3);
#line 20
testRunner.When("I retrieve all pay periods");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "StartDate",
                        "EndDate"});
            table4.AddRow(new string[] {
                        "JuneTest",
                        "01/01/2012",
                        "02/02/2012"});
            table4.AddRow(new string[] {
                        "JulyTest",
                        "03/03/2012",
                        "04/04/2012"});
#line 21
testRunner.Then("They should have details", ((string)(null)), table4);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editing a pay period")]
        public virtual void EditingAPayPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing a pay period", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "StartDate",
                        "EndDate"});
            table5.AddRow(new string[] {
                        "JuneTest",
                        "01/01/2012",
                        "02/02/2012"});
#line 27
testRunner.Given("I have a new system with pay periods", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "StartDate",
                        "EndDate"});
            table6.AddRow(new string[] {
                        "JuneTestCange",
                        "01/02/2012",
                        "02/03/2012"});
#line 30
testRunner.When("I edit and save JuneTest with details", ((string)(null)), table6);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "StartDate",
                        "EndDate"});
            table7.AddRow(new string[] {
                        "JuneTestCange",
                        "01/02/2012",
                        "02/03/2012"});
#line 33
testRunner.Then("I should be able to retrieve JuneTest from the database with details", ((string)(null)), table7);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deleting a pay period")]
        public virtual void DeletingAPayPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleting a pay period", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "StartDate",
                        "EndDate"});
            table8.AddRow(new string[] {
                        "JuneTest",
                        "01/01/2012",
                        "02/02/2012"});
#line 38
testRunner.Given("I have a new system with pay periods", ((string)(null)), table8);
#line 41
testRunner.When("I delete JuneTest");
#line 42
testRunner.Then("The pay period database should be empty");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
